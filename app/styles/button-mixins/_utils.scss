/**
 *------------------------------------------------------------------------------
 *  SCSS Button Mixins (v0.1.3)
 *------------------------------------------------------------------------------
 *  Matt Daniel Brown <dev@mattbrown.email>
 *  https://scss-button-mixins.mattdbrown.dev
 *  Edited April 2nd, 08:31am
 *------------------------------------------------------------------------------
**/

//——————————————————————————————————————————————————————————————————————————————
// _utils.scss : Utilities, Mixins, Functions, Etc.
//——————————————————————————————————————————————————————————————————————————————

@function adjustmentForState($_state: hover) {
  @if($_state == hover) {
    @return $hover-adjustment;
  } @else if($_state == focus) {
    @return $focus-adjustment;
  } @else if($_state == active) {
    @return $active-adjustment;
  } @else {
    @return $hover-adjustment;
  }
}

@function darkenColorForState($_base-color: $primary-color, $_state: hover) {
  @return darken($_base-color, adjustmentForState($_state));
}

@mixin buttonColorsForState($color:$primary-color, $state:hover, $outline:false) {

  $_adjustedColor: darkenColorForState($color, $state);
  border-color: $_adjustedColor;
  @if($outline == true) {
    color: $_adjustedColor;
  } @else {
    background : $_adjustedColor;
  }
}

@mixin applyCustomFocusEffectForColor($_color: $primary-color) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba($_color, 0.25);
  }
}

@mixin button($type: $default-button-type, $color: $primary-color, $rounded: false) {

  @extend %button-base;

  @if($type == $button-type--outline) {

    background   : transparent;
    border-color : $color;
    color        : $color;

    &:hover {
      border-color: darkenColorForState($color, hover);
      color: darkenColorForState($color, hover);
      background : rgba($color, 0.125);
    }
    &:focus {
      border-color: darkenColorForState($color, focus);
      color: darkenColorForState($color, focus);
      background : rgba($color, 0.2);
    }
    &:active {
      background : rgba($color, 0.35);
      border-color: darkenColorForState($color, active);
      color: darkenColorForState($color, active);
    }

  } @else {

    background   : $color;
    border-color : $color;
    color        : white;


    &:hover {
      border-color: darkenColorForState($color, hover);
      background-color: darkenColorForState($color, hover);
    }
    &:focus {
      border-color: darkenColorForState($color, focus);
      background-color: darkenColorForState($color, focus);
    }
    &:active {
      border-color: darkenColorForState($color, active);
      background-color: darkenColorForState($color, active);
    }
  }

  @if($rounded == true) {
    border-radius: $rounded-border-radius !important;
    //border-radius: 24px !important;

  }
}

/**
 * @function
 * Computes an exponent.
 * @param   {number}          $base      : Number to multiply by itself.
 * @param   {int (unitless)}  $exponent  : Number of `$base`s multiplied together.
 * @return  {number}         `$base` to the power of `$exponent`.
*/
@function pow($base, $exponent) {
  $result: 1;
  @for $_ from 1 through $exponent {
    $result: $result * $base;
  }
  @return $result;
}


